


<!-- Divide the content into 4 rows-->
<div id="form" class="container">
    <!-- Basic cart info like Product, Price... etc.-->
    <div id="title" class="row">
        <span class="col-xs-6">PRODUCT</span>
        <span class="col-xs-2">PRICE</span>
        <span class="col-xs-2">QUANTITY</span>
        <span class="col-xs-2 push-right">TOTAL</span>

        <hr>
    </div>
    
    

    <!-- Line item info-->
    <%= form_for :cart do |f| %>
      <% @line_items.each do |line_item| %>

    

        
    
        <div id="content" class="row">

            <!-- This tag prepares controller data of line_item and transform to data- attribute for Vue to manipulate -->
            <%= content_tag :div,
            id: "lineitem-data",
                data: {
                id: line_item.id,
                price: line_item.price,
                quantity: line_item.quantity
            } do %>
            <% end %>
            
            
            <span id="product_name" class="col-xs-2">
                <!--FIXME: put the actual image after the function is finished-->
                <p><%= image_tag 'products/dummy.png' %></p>
                
            </span>

            <span id="description" class="col-xs-4">
                <p><h4><%= Product.find(line_item.product_id).product_name  %></h4></p>
                
                <p>JumpFromPaper</p>
            </span>

            <span id="price" class="col-xs-2">
                <%= Product.find(line_item.product_id).price  %>
            </span>
            
            
            <div id="quantity" class="col-xs-2">
                <!--TODO: Use dropdown for quantity, then post to line_items controller to immediately update data -->
                <qty-adjust></qty-adjust>
                

                <br>
                <p id="remove_button">
                <!-- TODO: use AJAX :delete on this button with confirm -->
                <%= link_to 'Remove', '#' %>
                </p>
            </div>
            
            <div id="total" class="col-xs-2 push-right"><item-total></item-total></div>
            
        </div>

      <% end %>

    

        <!-- Checkout info -->
        <div id="info" class="row">
            <span id="custom_notice">*Customs are not included in the price of goods.</span>
            
            
            
            <span id="subtotal" class="pull-right">Subtotal USD${{subtotal}}</span>
            
        </div>

        <!-- Notes and cart actions -->
        <!--TODO: As Vue is applied, don't make a update button -->
        <div id="notes_action" class="row">
            <div id="notes" class="col-xs-8">
                <h3><%= f.label :notes %></h3>
                <!-- FIXME: limit min-height of text_area, but is the proportion fixed? -->
                <p><%= f.text_area :notes, style:"width: 100%"  %></p>
            </div>

            <div id="action" class="col-xs-4">
                <p class="pull-right"><i>Shipping will be calculated at checkout.</i></p>
                <br>
                <br>
                <p class="pull-right">
                <!--TODO: Replace with Vue here, no need to use AJAX for this button-->
                <%= button_to "CHECK OUT", '#' %>
                </p>
            </div>
        
        </div>
    <% end %>
    


</div>

<!-- Failed implementation:
As Vue is pretty awesome with live data replacement, I wanted to use it to set quantity and then calculate item's total price and subtotal without refreshing page, then post all of the data to controller.
However this method is a bit hard and not so imperative for me now, since:
1. It would be hard to retrieve data from multiple same-named Vue component instances.
2. Data formats are not aligned between Rails and Vue.
3. Indeed, 2. can be overcome by using JSON for alignment. Rails serves as API and sends JSON for Vue to process, then Vue POSTs JSON to Rails controller.
This method is kind of isomorphic, not so suitable for me that wants to focus on backend for now. BTW I'm not certain how to process JSONified data, and it may not be the fastest implementation, cool though, the priority should be finishing this demo project ASAP.
-->
<!-- Proposed implementation for live data replacement:
1. Use f.select to show dropdown (defaulted 1 as it is in schema). The item total and subtotal can be calculated at this stage using defaults.
2. POST with AJAX to line_items controller and save to database immediately.
3. Write a VanillaJS to listen to quantity change, then response with AJAX change for corresponding data. Remember to preventDefault()

This method may not be so smooth though, it's still better than the original JFP site which needs to "update cart" and refresh.
-->

<!-- Latest thoughts, see carts.js-->
<!-- HIGHWAY to WORKING ON HELL!! -->

















