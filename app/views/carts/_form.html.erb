


<!-- Divide the content into 3 rows-->
<div id="form" class="container">
    <!-- Row: Basic cart info like Product, Price... etc.-->
    <div id="title" class="row">
        <span class="col-xs-8">PRODUCT</span>
        <span class="col-xs-2">PRICE</span>
        <span class="col-xs-2">QUANTITY</span>
        

        <hr>
    </div>
    
    
    <div id="item-info">
    <!-- Row, may be many: Line item info-->
      <% @line_items.each do |line_item| %>
        <%= form_for :line_item, remote: true, authenticity_token: true do |f| %>

        <div id="content-<%=line_item.id %>" class="row">

            <!-- Include an invisible line_item id and let it sent in params when form submitted -->
            <%= hidden_field_tag :id, line_item.id %>
            
            
            
            <span id="product-image" class="col-xs-3">
                <!--FIXME: put the actual image after the function is finished-->
                <p><%= image_tag 'products/dummy.png' %></p>
                
            </span>

            <span id="product-name" class="col-xs-5">
                <!-- TODO: link_to product page -->
                <p><h4><%= Product.find(line_item.product_id).product_name  %></h4></p>
                
                <p>JumpFromPaper</p>
            </span>

            <span id="price" class="col-xs-2">
                <%= line_item.price  %>
            </span>
            
            
            <div id="quantity" class="col-xs-2">
                
                <!-- TODO: Add inventory to products, then apply upper limit of quantity by inventory amount -->
                <%= f.select :quantity, options_for_select(1..10, selected: line_item.quantity), {}, onchange: 'this.form.submit(); '  %>
                <!-- Explanation: as the quantity changes, the form will be submitted and posted to 'carts', ie. line_items#update_quantity. As the params is correctly filled in, the controller action will be triggered and updates DB data. -->
                
                

                <br>
                <p id="remove_button">
                    <%= link_to 'Remove', line_item_path(id: line_item.id), method: :delete,  data: {confirm: 'Are you sure?'}  %>
                </p>
            </div>
            
            
            
        </div>
        <hr>

        <% end %>
      <% end %>
    </div>

    

        <!-- Row: Fee info and checkout-->
        <div id="info" class="row">
            <span id="custom_notice">*Customs are not included in the price of goods.</span>
            <br>
            <span id="shipping-to-add">*Shipping will be calculated at checkout.</span>
            <br>
            
            
            
            <span id="subtotal" class="pull-right">
                Subtotal USD$<%= @line_items.sum(:total) %> 
            </span>
            <br>
            <!-- This is first loaded from DB, then carts.js controls the summing and updating. -->

            <span class="pull-right">
                
                <button class="btn"><%= link_to "CHECK OUT", controller: "carts", action: "contact_info", cart_id: @cart.id %></button>
            </span>
            
        </div>

        

            
        
        </div>
    
    


</div>



        
        <!-- FIXME: move notes div to order section
        
            -->



<!-- Failed implementation:
As Vue is pretty awesome with live data replacement, I wanted to use it to set quantity and then calculate item's total price and subtotal without refreshing page, then post all of the data to controller.
However this method is a bit hard and not so imperative for me now, since:
1. It would be hard to retrieve data from multiple same-named Vue component instances.
2. Data formats are not aligned between Rails and Vue.
3. Indeed, 2. can be overcome by using JSON for alignment. Rails serves as API and sends JSON for Vue to process, then Vue POSTs JSON to Rails controller.
This method is kind of isomorphic, not so suitable for me that wants to focus on backend for now. BTW I'm not certain how to process JSONified data, and it may not be the fastest implementation, cool though, the priority should be finishing this demo project ASAP.
-->
<!-- Proposed implementation for live data replacement:
1. Use f.select to show dropdown (defaulted 1 as it is in schema). The item total and subtotal can be calculated at this stage using defaults.
2. POST with AJAX to line_items controller and save to database immediately.
3. Write a VanillaJS to listen to quantity change and track the data on page. Then make calculation and live update.

This method may not be so smooth though, it's still better than the original JFP site which needs to "update cart" and refresh.
-->



<%= javascript_pack_tag 'carts' %>

















